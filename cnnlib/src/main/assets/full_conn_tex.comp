layout (local_size_x = X_SIZE, local_size_y = Y_SIZE, local_size_z = Z_SIZE) in;

uniform int params[8];  // input_shape[3] output_shape[3] active_type start_y
layout(binding = 0, rgba32f) readonly uniform image2D input_image;
layout(binding = 1, rgba32f) writeonly uniform image2D output_image;
layout(binding = 2, rgba32f) readonly uniform image2D kennel_image;

ivec2 getFeatureMapIndexInTexture(int num, int width);
vec4 getKennelValue(int c, int w, int h,  int pos_y, int w_i, int c_i);
float relu(float i);
float sigmoid(float i);
float activeValue(int type, float v);

void main(void)
{
    ivec3 pos = ivec3(gl_GlobalInvocationID.xyz);

    int input_shape[3] = int[3](params[0], params[1], params[2]);
    int output_shape[3] = int[3](params[3], params[4], params[5]);
    int active_type = params[6];
    int start_y = params[7];

    // 获得当前计算器坐标
    vec4 output_vec = vec4(0.0);

    int count = input_shape[2] / 4;
    for (int i = 0; i < 4; i++) {
        int kennel_index = pos.z * 4  + i;
        int pos_y = kennel_index + start_y;
        if (kennel_index + i < KENNEL_AMOUNT) {
            for (int c = 0; c < count; c++) {
                for (int w = 0; w < input_shape[0]; w++) {
                    for (int h = 0; h < input_shape[1]; h++) {
                        ivec2 fea_map_on_tex = getFeatureMapIndexInTexture(c, input_shape[0]);
                        ivec2 real_pos = ivec2(w + input_shape[0] * fea_map_on_tex.x, h + input_shape[1] * fea_map_on_tex.y);
                        vec4 data = imageLoad(input_image, real_pos);
                        vec4 k_v = getKennelValue(c, w, h, pos_y, input_shape[0], count);
                        output_vec[i] += dot(data, k_v);
                    }
                }
            }
            ivec2 bias_index = ivec2(count * input_shape[0] * input_shape[1], pos_y);
            output_vec[i] += imageLoad(kennel_image, bias_index)[0];
            output_vec[i] = activeValue(active_type, output_vec[i]);
        }
    }
    ivec2 store_pos = ivec2(pos.z/4, pos.z/4/1024);
    imageStore(output_image, store_pos.xy, output_vec);
}

vec4 getKennelValue(int c, int w, int h,  int pos_y, int w_i, int c_i) {
    return imageLoad(kennel_image, ivec2(c_i * (w + w_i * h) + c, pos_y));
}

ivec2 getFeatureMapIndexInTexture(int num, int width) {
    int xMaxCount = 1024 / width;   // 1024 是设置的存储纹理边长
    int x =0;
    int y =0;
    if (num < xMaxCount) {
        x = num;
    } else {
        x = num % xMaxCount;
        y = num / xMaxCount;
    }
    return ivec2(x,y);
}

float relu(float i){
    if (i > 0.0){
        return i;
    } else {
        return 0.0;
    }
}

float sigmoid(float i){
    return 1.0 / (1.0 + exp(-i));
}

float activeValue(int type, float v){
    if (type == 0) {
        return relu(v);
    } else if (type == 1) {
        return sigmoid(v);
    } else if (type == 2){
        return tanh(v);
    } else {
        return v;
    }
}