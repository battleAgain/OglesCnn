layout (local_size_x = X_SIZE, local_size_y = Y_SIZE, local_size_z = Z_SIZE) in;

uniform int params[6];  // input_shape[3] output_shape[3]
layout(binding = 0, rgba32f) readonly uniform  image2D input_image;
layout(binding = 1, rgba32f) writeonly uniform  image2D output_image;

ivec2 getFeatureMapIndexOnTexture(int num, int width);
ivec2 getInIndexOnTexture(ivec2 fea_map_index, ivec2 index_on_fea_map, int[3] input_shape);

// 计算工作组坐标 x, y, z  x为输入特征图的x y为输入特征图的y z为输入特征图在输入纹理上的编号
void main(void)
{
    ivec3 pos = ivec3(gl_GlobalInvocationID.xyz);

    int input_shape[3] = int[3](params[0], params[1], params[2]);
    int output_shape[3] = int[3](params[3], params[4], params[5]);

    if (pos.z > output_shape[2]) {
        return;
    }

    ivec2 fea_map_index = getFeatureMapIndexOnTexture(pos.z, input_shape[0]);
    ivec2 index_on_tex = getInIndexOnTexture(fea_map_index, pos.xy, input_shape);
    vec4 data = imageLoad(input_image, index_on_tex);

    int y = pos.y * input_shape[0] + pos.x;
    ivec2 restore_pos = ivec2(pos.z, y);
    imageStore(output_image, restore_pos, data);
}

ivec2 getFeatureMapIndexOnTexture(int num, int width) {
    int xMaxCount = 1024 / width;   // 1024 是设置的存储纹理边长
    int x =0;
    int y =0;
    if (num < xMaxCount) {
        x = num;
    } else {
        x = num % xMaxCount;
        y = num / xMaxCount;
    }
    return ivec2(x,y);
}

ivec2 getInIndexOnTexture(ivec2 fea_map_index, ivec2 index_on_fea_map, int[3] input_shape){
    int x= fea_map_index[0] * input_shape[0] + index_on_fea_map[0];
    int y= fea_map_index[1] * input_shape[1] + index_on_fea_map[1];
    return ivec2(x, y);
}