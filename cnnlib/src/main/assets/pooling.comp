layout (local_size_x = X_SIZE, local_size_y = Y_SIZE, local_size_z = 1) in;

uniform int params[10];     // input_shape[3], output_shape[3], ksize[2], stride[2]
layout(binding = 0, rgba32f) readonly uniform  image2D input_image;
layout(binding = 1, rgba32f) writeonly uniform  image2D output_image;

ivec2 getFeatureMapIndexInTexture(int num, int width);
ivec2[KENNEL_AREA] getInIndexInFeatureMap(ivec3 pos, int[2] kennel_shape, int[2] strides);
int getComputeCount(int[3] input_shape);
bool isInInputShape(ivec2 index, int[3] input_shape);
ivec2 getRealStoreIndex(ivec3 pos, int num, int[3] output_shape);
vec4 performMaxPooling(int num, ivec2[KENNEL_AREA] input_data_index, int[3] input_shape);

// 计算工作组坐标 x, y, z  x为输出特征图的x y为输入特征图的y z为输出特征图在输出纹理上的编号
void main(void)
{
    ivec3 pos = ivec3(gl_GlobalInvocationID.xyz);
    int input_shape[3] = int[3](params[0], params[1], params[2]);
    int output_shape[3] = int[3](params[3], params[4], params[5]);
    int kennel_shape[2] = int[2](params[6], params[7]);
    int strides[2] = int[2](params[8], params[9]);
    int count = getComputeCount(input_shape);

    if (pos.z > count) {
        return;
    }

    ivec2 input_data_index[KENNEL_AREA] = getInIndexInFeatureMap(pos, kennel_shape, strides);

    vec4 pooling_result = performMaxPooling(pos.z,input_data_index, input_shape);
    ivec2 store_pos = getRealStoreIndex(pos, pos.z, output_shape);
    imageStore(output_image, store_pos.xy, pooling_result);
}

// 获得本次池化的特征图 在输入纹理上的 坐标
ivec2 getFeatureMapIndexInTexture(int num, int width) {
    int xMaxCount = 1024 / width;   // 1024 是设置的存储纹理边长
    int x =0;
    int y =0;
    if (num < xMaxCount) {
        x = num;
    } else {
        x = num % xMaxCount;
        y = num / xMaxCount;
    }
    return ivec2(x,y);
}

// 获得本次池化 在输入特征图上的坐标
ivec2[KENNEL_AREA] getInIndexInFeatureMap(ivec3 pos, int[2] kennel_shape, int[2] strides) {
    ivec2 input_data_index[KENNEL_AREA];
    for (int y=0; y < kennel_shape[1]; y++){
        for (int x=0;x < kennel_shape[0]; x++){
            input_data_index[y*kennel_shape[0] + x] = ivec2(x,y) + ivec2(strides[0]*pos.x, strides[1]*pos.y);
        }
    }
    return input_data_index;
}

int getComputeCount(int[3] input_shape) {
    float count = float(input_shape[2])/4.0;
    return int(ceil(count));
}

// 判断是否处于输入区域
bool isInInputShape(ivec2 index, int[3] input_shape) {
    if (index.x < 0 || index.x >= input_shape[0]) {
        return false;
    } else if (index.y < 0 || index.y >= input_shape[1]) {
        return false;
    }
    return true;
}

// 获得实际存储位置 x,y表示在特征图上的坐标
ivec2 getRealStoreIndex(ivec3 pos, int num, int[3] output_shape) {
    ivec2 relative_pos = pos.xy;
    ivec2 feature_map_index_in_texture = getFeatureMapIndexInTexture(num, output_shape[0]);
    ivec2 index_in_texture = relative_pos + ivec2(feature_map_index_in_texture[0]*output_shape[0], feature_map_index_in_texture[1]*output_shape[1]);
    return index_in_texture;
}

// 在一组特征图上进行池化运算
vec4 performMaxPooling(int num, ivec2[KENNEL_AREA] input_data_index, int[3] input_shape) {
    ivec2 feature_map_index_in_texture = getFeatureMapIndexInTexture(num, input_shape[0]);

    vec4 output_value;
    for (int i = 0; i < KENNEL_AREA;i++){
        ivec2 index = input_data_index[i];
        if (isInInputShape(index, input_shape)) {
            ivec2 index_in_texture = index + ivec2(feature_map_index_in_texture[0]*input_shape[0],feature_map_index_in_texture[1]*input_shape[1]);
            vec4 data = imageLoad(input_image, index_in_texture);
            if (i != 0) {
                output_value = max(output_value, data);
            } else {
                output_value = data;
            }
        }
    }
    return output_value;
}