layout (local_size_x = X_SIZE, local_size_y = Y_SIZE, local_size_z = Z_SIZE) in;

uniform int params[14];  // kennel_shape[3] input_shape[3] output_shape[3] strides[2] padding active_type
layout(binding = 0, rgba32f) readonly uniform image2D input_image;
layout(binding = 1, rgba32f) writeonly uniform image2D output_image;
layout(binding = 2, rgba32f) readonly uniform image2D kennel_image;
bool isZero(ivec2 index, int[3] input_shape);
ivec2[KENNEL_AREA] getInIndexInFeatureMap(ivec3 pos, int[3] kennel_shape, int padding, int[2] strides);
vec4 performConvolute4(int num, ivec2[KENNEL_AREA] input_data_index, int[3] input_shape, int kennel_index, int start_y, int count);
vec4 performConvolute3(int num, ivec2[KENNEL_AREA] input_data_index, int[3] input_shape, int kennel_index, int start_y, int count);
vec4 performConvolute2(int num, ivec2[KENNEL_AREA] input_data_index, int[3] input_shape, int kennel_index, int start_y, int count);
vec4 performConvolute1(int num, ivec2[KENNEL_AREA] input_data_index, int[3] input_shape, int kennel_index, int start_y, int count);
ivec3 getRealStoreIndex(ivec3 pos, int[3] output_shape, int kennel_index);
ivec2 getFeatureMapIndexInTexture(int num, int width);
float relu(float i);
float sigmoid(float i);
float activeValue(int type, float v);

bool is_zero[KENNEL_AREA];

void main(void)
{
    // 分解参数
    int kennel_shape[3] = int[3](params[0], params[1] , params[2]);
    int input_shape[3] = int[3](params[3], params[4] , params[5]);
    int output_shape[3] = int[3](params[6], params[7] , params[8]);
    int strides[2] = int[2](params[9], params[10]);
    int padding = params[11];
    int active_type = params[12];
    int start_y = params[13];

    ivec3 pos = ivec3(gl_GlobalInvocationID.xyz);
    int kennel_index = pos.z * 4;
    if (kennel_index >= output_shape[2]) {
        return;
    }
    ivec3 restore_pos = getRealStoreIndex(pos, output_shape, kennel_index);
    ivec2 input_data_index[KENNEL_AREA] = getInIndexInFeatureMap(pos, kennel_shape, padding, strides);
    int count = kennel_shape[2] / 4;
    vec4 output_vec = vec4(0.0);

    for (int i = 0; i < KENNEL_AREA; i++) {
        ivec2 index = input_data_index[i];
        is_zero[i] = isZero(index, input_shape);
    }

    int delta = output_shape[2] - kennel_index;

    if (delta >= 4) {
        for (int i=0; i < count; i++) {
            output_vec += performConvolute4(i, input_data_index, input_shape, kennel_index, start_y, count);
        }
        ivec2 bias_index_0 = ivec2(count * KENNEL_AREA, start_y + kennel_index);
        ivec2 bias_index_1 = ivec2(count * KENNEL_AREA, start_y + kennel_index + 1);
        ivec2 bias_index_2 = ivec2(count * KENNEL_AREA, start_y + kennel_index + 2);
        ivec2 bias_index_3 = ivec2(count * KENNEL_AREA, start_y + kennel_index + 3);
        vec4 bias_0 = imageLoad(kennel_image, bias_index_0);
        vec4 bias_1 = imageLoad(kennel_image, bias_index_1);
        vec4 bias_2 = imageLoad(kennel_image, bias_index_2);
        vec4 bias_3 = imageLoad(kennel_image, bias_index_3);

        output_vec += vec4(bias_0[0], bias_1[0], bias_2[0], bias_3[0]);
        output_vec[0] = activeValue(active_type, output_vec[0]);
        output_vec[1] = activeValue(active_type, output_vec[1]);
        output_vec[2] = activeValue(active_type, output_vec[2]);
        output_vec[3] = activeValue(active_type, output_vec[3]);
    } else if(delta == 3) {
        for (int i=0; i < count; i++) {
            output_vec += performConvolute3(i, input_data_index, input_shape, kennel_index, start_y, count);
        }
        ivec2 bias_index_0 = ivec2(count * KENNEL_AREA, start_y + kennel_index);
        ivec2 bias_index_1 = ivec2(count * KENNEL_AREA, start_y + kennel_index + 1);
        ivec2 bias_index_2 = ivec2(count * KENNEL_AREA, start_y + kennel_index + 2);
        vec4 bias_0 = imageLoad(kennel_image, bias_index_0);
        vec4 bias_1 = imageLoad(kennel_image, bias_index_1);
        vec4 bias_2 = imageLoad(kennel_image, bias_index_2);

        output_vec += vec4(bias_0[0], bias_1[0], bias_2[0], 0.0);
        output_vec[0] = activeValue(active_type, output_vec[0]);
        output_vec[1] = activeValue(active_type, output_vec[1]);
        output_vec[2] = activeValue(active_type, output_vec[2]);
    } else if (delta == 2) {
        for (int i=0; i < count; i++) {
            output_vec += performConvolute2(i, input_data_index, input_shape, kennel_index, start_y, count);
        }
        ivec2 bias_index_0 = ivec2(count * KENNEL_AREA, start_y + kennel_index);
        ivec2 bias_index_1 = ivec2(count * KENNEL_AREA, start_y + kennel_index + 1);
        vec4 bias_0 = imageLoad(kennel_image, bias_index_0);
        vec4 bias_1 = imageLoad(kennel_image, bias_index_1);

        output_vec += vec4(bias_0[0], bias_1[0], 0.0, 0.0);
        output_vec[0] = activeValue(active_type, output_vec[0]);
        output_vec[1] = activeValue(active_type, output_vec[1]);
    } else if (delta == 1) {
        for (int i=0; i < count; i++) {
            output_vec += performConvolute1(i, input_data_index, input_shape, kennel_index, start_y, count);
        }
        ivec2 bias_index_0 = ivec2(count * KENNEL_AREA, start_y + kennel_index);
        vec4 bias_0 = imageLoad(kennel_image, bias_index_0);

        output_vec += vec4(bias_0[0], 0.0, 0.0, 0.0);
        output_vec[0] = activeValue(active_type, output_vec[0]);
    }

    imageStore(output_image, restore_pos.xy,  output_vec);
}

ivec2 getFeatureMapIndexInTexture(int num, int width) {
    int xMaxCount = 1024 / width;   // 1024 是设置的存储纹理边长
    int x =0;
    int y =0;
    if (num < xMaxCount) {
        x = num;
    } else {
        x = num % xMaxCount;
        y = num / xMaxCount;
    }
    return ivec2(x,y);
}

// 获得实际存储位置 x,y表示在特征图上的坐标，z表示是第几张特征图
ivec3 getRealStoreIndex(ivec3 pos, int[3] output_shape, int kennel_index) {
    int count = kennel_index/4;
    int remain = kennel_index % 4;
    ivec2 relative_pos = pos.xy;
    ivec2 feature_map_index_in_texture = getFeatureMapIndexInTexture(count, output_shape[0]);
    ivec2 index_in_texture = relative_pos + ivec2(feature_map_index_in_texture[0]*output_shape[0], feature_map_index_in_texture[1]*output_shape[1]);
    return ivec3(index_in_texture, remain);
}

// 判断是否处于padding区域
bool isZero(ivec2 index, int[3] input_shape) {
    if (index.x < 0 || index.x >= input_shape[0]) {
        return true;
    } else if (index.y < 0 || index.y >= input_shape[1]) {
        return true;
    }
    return false;
}

// 获得本次卷积 在特征图上的坐标
ivec2[KENNEL_AREA] getInIndexInFeatureMap(ivec3 pos, int[3] kennel_shape, int padding, int[2] strides) {
    ivec2 input_data_index[KENNEL_AREA];
    for (int y=0; y < kennel_shape[1]; y++){
        for (int x=0;x < kennel_shape[0]; x++){
            input_data_index[y*kennel_shape[0] + x] = ivec2(-padding,-padding) + ivec2(x,y) + ivec2(strides[0]*pos.x, strides[1]*pos.y);
        }
    }
    return input_data_index;
}

// 在一组特征图上继续卷积运算
vec4 performConvolute4(int num, ivec2[KENNEL_AREA] input_data_index, int[3] input_shape, int kennel_index, int start_y, int count) {
    ivec2 feature_map_index_in_texture = getFeatureMapIndexInTexture(num, input_shape[0]);

    vec4 output_value = vec4(0.0);
    for (int i = 0; i < KENNEL_AREA;i++){
        ivec2 index = input_data_index[i];

        if (!is_zero[i]) {
            ivec2 index_in_texture = index + ivec2(feature_map_index_in_texture[0]*input_shape[0],feature_map_index_in_texture[1]*input_shape[1]);
            ivec2 k_i_0 = ivec2(i * count + num, start_y + kennel_index);
            ivec2 k_i_1 = ivec2(i * count + num, start_y + kennel_index + 1);
            ivec2 k_i_2 = ivec2(i * count + num, start_y + kennel_index + 2);
            ivec2 k_i_3 = ivec2(i * count + num, start_y + kennel_index + 3);

            vec4 data = imageLoad(input_image, index_in_texture);
            vec4 k_v_0 = imageLoad(kennel_image, k_i_0);
            vec4 k_v_1 = imageLoad(kennel_image, k_i_1);
            vec4 k_v_2 = imageLoad(kennel_image, k_i_2);
            vec4 k_v_3 = imageLoad(kennel_image, k_i_3);

            output_value[0] += dot(data, k_v_0);
            output_value[1] += dot(data, k_v_1);
            output_value[2] += dot(data, k_v_2);
            output_value[3] += dot(data, k_v_3);
        }
    }
    return output_value;
}

// 在一组特征图上继续卷积运算
vec4 performConvolute3(int num, ivec2[KENNEL_AREA] input_data_index, int[3] input_shape, int kennel_index, int start_y, int count) {
    ivec2 feature_map_index_in_texture = getFeatureMapIndexInTexture(num, input_shape[0]);

    vec4 output_value = vec4(0.0);
    for (int i = 0; i < KENNEL_AREA;i++){
        ivec2 index = input_data_index[i];

        if (!is_zero[i]) {
            ivec2 index_in_texture = index + ivec2(feature_map_index_in_texture[0]*input_shape[0],feature_map_index_in_texture[1]*input_shape[1]);
            ivec2 k_i_0 = ivec2(i * count + num, start_y + kennel_index);
            ivec2 k_i_1 = ivec2(i * count + num, start_y + kennel_index + 1);
            ivec2 k_i_2 = ivec2(i * count + num, start_y + kennel_index + 2);

            vec4 data = imageLoad(input_image, index_in_texture);
            vec4 k_v_0 = imageLoad(kennel_image, k_i_0);
            vec4 k_v_1 = imageLoad(kennel_image, k_i_1);
            vec4 k_v_2 = imageLoad(kennel_image, k_i_2);

            output_value[0] += dot(data, k_v_0);
            output_value[1] += dot(data, k_v_1);
            output_value[2] += dot(data, k_v_2);

        }
    }
    return output_value;
}

// 在一组特征图上继续卷积运算
vec4 performConvolute2(int num, ivec2[KENNEL_AREA] input_data_index, int[3] input_shape, int kennel_index, int start_y, int count) {
    ivec2 feature_map_index_in_texture = getFeatureMapIndexInTexture(num, input_shape[0]);

    vec4 output_value = vec4(0.0);
    for (int i = 0; i < KENNEL_AREA;i++){
        ivec2 index = input_data_index[i];

        if (!is_zero[i]) {
            ivec2 index_in_texture = index + ivec2(feature_map_index_in_texture[0]*input_shape[0],feature_map_index_in_texture[1]*input_shape[1]);
            ivec2 k_i_0 = ivec2(i * count + num, start_y + kennel_index);
            ivec2 k_i_1 = ivec2(i * count + num, start_y + kennel_index + 1);

            vec4 data = imageLoad(input_image, index_in_texture);
            vec4 k_v_0 = imageLoad(kennel_image, k_i_0);
            vec4 k_v_1 = imageLoad(kennel_image, k_i_1);

            output_value[0] += dot(data, k_v_0);
            output_value[1] += dot(data, k_v_1);
        }
    }
    return output_value;
}


// 在一组特征图上继续卷积运算
vec4 performConvolute1(int num, ivec2[KENNEL_AREA] input_data_index, int[3] input_shape, int kennel_index, int start_y, int count) {
    ivec2 feature_map_index_in_texture = getFeatureMapIndexInTexture(num, input_shape[0]);

    vec4 output_value = vec4(0.0);
    for (int i = 0; i < KENNEL_AREA;i++){
        ivec2 index = input_data_index[i];

        if (!is_zero[i]) {
            ivec2 index_in_texture = index + ivec2(feature_map_index_in_texture[0]*input_shape[0],feature_map_index_in_texture[1]*input_shape[1]);
            ivec2 k_i_0 = ivec2(i * count + num, start_y + kennel_index);

            vec4 data = imageLoad(input_image, index_in_texture);
            vec4 k_v_0 = imageLoad(kennel_image, k_i_0);

            output_value[0] += dot(data, k_v_0);
        }
    }
    return output_value;
}

float relu(float i){
    if (i > 0.0){
        return i;
    } else {
        return 0.0;
    }
}

float sigmoid(float i){
    return 1.0 / (1.0 + exp(-i));
}

float activeValue(int type, float v){
    if (type == 0) {
        return relu(v);
    } else if (type == 1) {
        return sigmoid(v);
    } else if (type == 2){
        return tanh(v);
    } else {
        return v;
    }
}