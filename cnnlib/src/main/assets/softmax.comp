layout (local_size_x = X_SIZE, local_size_y = Y_SIZE, local_size_z = Z_SIZE) in;

layout(binding = 0, rgba32f) readonly uniform  image2D input_image;
layout(binding = 1, rgba32f) writeonly uniform  image2D output_image;

shared float scanline[AMOUNT];
float softmax[AMOUNT];

vec2 getExtremum();
float getSoftmaxValue(int index, vec2 extremun);

void main(void)
{
    ivec2 pos = ivec2(gl_GlobalInvocationID.xy);
    vec4 data = imageLoad(input_image, pos);
    int startIndex = (pos.y * X_SIZE + pos.x) * 4;
    for (int i = 0; i < 4; i++) {
        if (startIndex + i < AMOUNT) {
            scanline[startIndex + i] = data[i];
        }
    }
    barrier();
    vec2 extremun = getExtremum();
    float softmax = 0.0;
    vec4 result = vec4(0.0);
    if (extremun[0] != extremun[1]) {
        for (int i = 0; i < 4; i++) {
            if (startIndex + i < AMOUNT) {
                result[i] = getSoftmaxValue(startIndex + i, extremun);
            }
        }
    } else {
        softmax = 1.0 / float(AMOUNT);
        result = vec4(softmax);
    }
    imageStore(output_image, pos.xy, result);
}

vec2 getExtremum(){
    float max_v = scanline[0];
    float min_v = scanline[0];
    for (int i=0; i< AMOUNT; i++) {
        if (max_v < scanline[i]) {
            max_v = scanline[i];
        }
        if (min_v > scanline[i]) {
            min_v = scanline[i];
        }
    }
    return vec2(max_v, min_v);
}

float getSoftmaxValue(int index, vec2 extremun) {
    for (int i = 0; i < AMOUNT; i++){
        float v = (scanline[i] - extremun[1]) * 100.0 / (extremun[0] - extremun[1]) - 50.0;
        softmax[i] = exp(v);
    }

    float sum = 0.0;
    for (int i=0; i < AMOUNT; i++){
        sum += softmax[i];
    }
    return softmax[index] / sum;
}