layout (local_size_x = X_SIZE, local_size_y = Y_SIZE, local_size_z = 1) in;

layout(binding = 0, rgba32f) readonly uniform  image2D input_image;
layout(binding = 1, rgba32f) writeonly uniform  image2D output_image;

shared float scanline[KENNEL_AREA];

vec2 getExtremum();
float getSoftmaxValue(int index, vec2 extremun);

void main(void)
{
    ivec2 pos = ivec2(gl_GlobalInvocationID.xy);
    vec4 data = imageLoad(input_image, pos);
    int index = pos.y * X_SIZE + pos.x;
    scanline[index] = data.r;
    barrier();
    vec2 extremun = getExtremum();
    float softmax = getSoftmaxValue(index, extremun);
    imageStore(output_image, pos.xy, vec4(softmax, 0.0, 0.0, 0.0));
}

vec2 getExtremum(){
    float max_v = scanline[0];
    float min_v = scanline[0];
    for (int i=0; i< KENNEL_AREA; i++) {
        if (max_v < scanline[i]) {
            max_v = scanline[i];
        }
        if (min_v > scanline[i]) {
            min_v = scanline[i];
        }
    }
    return vec2(max_v, min_v);
}

float getSoftmaxValue(int index, vec2 extremun){
    for (int i = 0; i < KENNEL_AREA; i++){
        float v = (scanline[i] - extremun[1]) * 10.0 / (extremun[0] - extremun[1]);
        scanline[i] = exp(v);
    }

    float sum = 0.0;
    for (int i=0; i < KENNEL_AREA; i++){
        sum += scanline[i];
    }
    return scanline[index] / sum;
}