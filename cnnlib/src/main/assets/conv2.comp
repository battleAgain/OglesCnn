layout (local_size_x = X_SIZE, local_size_y = Y_SIZE, local_size_z = 1) in;

uniform int params[17];  // kennel_shape[3] input_shape[3] output_shape[3] strides[2] padding active_type startY kennelRestoreShape[3]
layout(binding = 0, rgba32f) readonly uniform image2D input_image;
layout(binding = 1, rgba32f) readonly uniform image2D kennel_image;
layout(binding = 2, rgba32f) readonly uniform image2D input_image2; //input_image2 == output_image
layout(binding = 2, rgba32f) writeonly uniform image2D output_image;

bool isZero(ivec2 index, int[3] input_shape);
ivec2[KENNEL_AREA] getInIndexInFeatureMap(ivec3 pos, int[3] kennel_shape, int padding, int[2] strides);
float performConvolute(int num, ivec2 [KENNEL_AREA] input_data_index, int[3] input_shape, int startY, int kennel_index);
ivec3 getRealStoreIndex(ivec3 pos, int[3] output_shape, int kennel_index);
ivec2 getFeatureMapIndexInTexture(int num, int width);
float getKennelValue(int kennel_value_index, int startY, int kennel_index);
int getComputeCount(int[3] kennel_shape);
float relu(float i);
float sigmoid(float i);
float activeValue(int type, float v);

void main(void)
{
    // 分解参数
    int kennel_shape[3] = int[3](params[0], params[1] , params[2]);
    int input_shape[3] = int[3](params[3], params[4] , params[5]);
    int output_shape[3] = int[3](params[6], params[7] , params[8]);
    int strides[2] = int[2](params[9], params[10]);
    int padding = params[11];
    int active_type = params[12];
    int startY = params[13];
    int kennel_restore_shape[3] = int[3](params[14], params[15], params[16]);

    ivec3 pos = ivec3(gl_GlobalInvocationID.xyz);
    int kennel_index = pos.z;

    ivec3 real_pos = getRealStoreIndex(pos, output_shape, kennel_index);

    vec4 data_origin = imageLoad(input_image2, real_pos.xy);

    ivec2 input_data_index[KENNEL_AREA] = getInIndexInFeatureMap(pos, kennel_shape, padding, strides);

    float output_value = 0.0;

    int count = getComputeCount(kennel_shape);

    for (int i=0; i < count; i++) {
        output_value += performConvolute(i, input_data_index, input_shape, startY, kennel_index);
    }

    int bias_x = kennel_restore_shape[0] - 1;
    int bias_y = startY + kennel_index;
    vec4 bias = imageLoad(kennel_image, ivec2(bias_x, bias_y));

    output_value += bias[kennel_restore_shape[2]];

    data_origin[real_pos.z] = activeValue(active_type, output_value);
    imageStore(output_image, real_pos.xy, data_origin);
}

ivec2 getFeatureMapIndexInTexture(int num, int width) {
    int xMaxCount = 1024 / width;   // 1024 是设置的存储纹理边长
    int x =0;
    int y =0;
    if (num < xMaxCount) {
        x = num;
    } else {
        x = num % xMaxCount;
        y = num / xMaxCount;
    }
    return ivec2(x,y);
}

// 获得实际存储位置 x,y表示在特征图上的坐标，z表示是第几张特征图
ivec3 getRealStoreIndex(ivec3 pos, int[3] output_shape, int kennel_index) {
    int count = kennel_index/4;
    int remain = kennel_index % 4;
    ivec2 relative_pos = pos.xy;
    ivec2 feature_map_index_in_texture = getFeatureMapIndexInTexture(count, output_shape[0]);
    ivec2 index_in_texture = relative_pos + ivec2(feature_map_index_in_texture[0]*output_shape[0], feature_map_index_in_texture[1]*output_shape[1]);
    return ivec3(index_in_texture, remain);
}

// 判断是否处于padding区域
bool isZero(ivec2 index, int[3] input_shape) {
    ivec2 index = ivec2(index.x % input_shape[0], index.y % input_shape[1]);
    if (index.x < 0 || index.x >= input_shape[0]) {
        return true;
    } else if (index.y < 0 || index.y >= input_shape[1]) {
        return true;
    }
    return false;
}

// 获得本次卷积 在特征图上的坐标
ivec2[KENNEL_AREA] getInIndexInFeatureMap(ivec3 pos, int[3] kennel_shape, int padding, int[2] strides) {
    ivec2 input_data_index[KENNEL_AREA];
    for (int y=0; y < kennel_shape[1]; y++){
        for (int x=0;x < kennel_shape[0]; x++){
            input_data_index[y*kennel_shape[0] + x] = ivec2(-padding,-padding) + ivec2(x,y) + ivec2(strides[0]*pos.x, strides[1]*pos.y);
        }
    }
    return input_data_index;
}

// 在一组特征图上继续卷积运算
float performConvolute(int num, ivec2[KENNEL_AREA] input_data_index, int[3] input_shape, int startY, int kennel_index) {
    ivec2 feature_map_index_in_texture = getFeatureMapIndexInTexture(num, input_shape[0]);

    float output_value = 0.0;
    for (int i = 0; i < KENNEL_AREA;i++){
        ivec2 index = input_data_index[i];
        if (!isZero(index, input_shape)) {
            ivec2 index_in_texture = index + ivec2(feature_map_index_in_texture[0]*input_shape[0],feature_map_index_in_texture[1]*input_shape[1]);
            vec4 data = imageLoad(input_image, index_in_texture);
            for (int ii = 0;ii < 4; ii++) {
                int kennel_value_index = (num * 4 + ii) * KENNEL_AREA + i;
                if (kennel_value_index < KENNEL_SIZE) {
                    float kennel_value = getKennelValue(kennel_value_index, startY, kennel_index);
                    output_value += data[ii] * kennel_value;
                }
            }
        }
    }
    return output_value;
}

float getKennelValue(int kennel_value_index, int startY, int kennel_index) {
    int x = kennel_value_index / 4;
    int z = kennel_value_index % 4;
    int y = startY + kennel_index;
    ivec2 k_pos = ivec2(x, y);
    vec4 data = imageLoad(kennel_image, k_pos);
    return data[z];
}

int getComputeCount(int[3] kennel_shape){
    int count = kennel_shape[2]/4;
    int remain = kennel_shape[2] % 4;
    if (remain != 0) {
        count = count + 1;
    }
    return count;
}

float relu(float i){
    if (i > 0.0){
        return i;
    } else {
        return 0.0;
    }
}

float sigmoid(float i){
    return 1.0 / (1.0 + exp(-i));
}

float activeValue(int type, float v){
    if (type == 0) {
        return relu(v);
    } else if (type == 1) {
        return sigmoid(v);
    } else if (type == 2){
        return tanh(v);
    } else {
        return v;
    }
}