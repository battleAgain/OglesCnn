layout (local_size_x = X_SIZE, local_size_y = Y_SIZE, local_size_z = Z_SIZE) in;

uniform int params[15];  // kennel_shape[3] input_shape[3] output_shape[3] strides[2] active_type pad_w pad_h
layout(binding = 0, rgba32f) readonly uniform image2DArray input_image;
layout(binding = 1, rgba32f) writeonly uniform image2DArray output_image;
layout(binding = 2, rgba32f) readonly uniform image2DArray kennel_image;

float relu(float i);
float sigmoid(float i);
float activeValue(int type, float v);
vec4 activeVector(int type, vec4 v);
//int realIndex(int v,  int border);
ivec2 getRelativeRestoreIndex(int pos, int offset, int out_width);

void main(void)
{
    // 分解参数
    int kennel_width = params[0];
    int kennel_height = params[1];
    int kennel_channel = params[2];

    int in_width = params[3];
    int in_height = params[4];
    int in_channel = params[5];

    int out_width = params[6];
    int out_height = params[7];
    int out_channel = params[8];

    int strides[2] = int[2](params[9], params[10]);

    int active_type = params[11];
    int align_channel = params[12];

    int pad_w = params[13];
    int pad_h = params[14];

    int count = align_channel / 4;

    int output_area = out_width * out_height;
    int kennel_area = kennel_width * kennel_height;
    ivec3 pos = ivec3(gl_GlobalInvocationID.xyz);

    int start_x_index = pos.x * 4;
    int start_z_index = pos.z * 4;

    int z_index0 = start_z_index;
    int z_index1 = start_z_index + 1;
    int z_index2 = start_z_index + 2;
    int z_index3 = start_z_index + 3;

    if (start_x_index >= output_area || start_z_index >= out_channel){
        return;
    }

    int bias_index = kennel_area;
    float bias0 = imageLoad(kennel_image, ivec3(bias_index, z_index0, 0))[0];
    float bias1 = imageLoad(kennel_image, ivec3(bias_index, z_index1, 0))[0];
    float bias2 = imageLoad(kennel_image, ivec3(bias_index, z_index2, 0))[0];
    float bias3 = imageLoad(kennel_image, ivec3(bias_index, z_index3, 0))[0];
    mat4 bias = mat4(bias0, bias1, bias2, bias3,
                        bias0, bias1, bias2, bias3,
                        bias0, bias1, bias2, bias3,
                        bias0, bias1, bias2, bias3);
    mat4 result = bias;

    int start_x = start_x_index;
    int x_0 = start_x % out_width;
    int y_0 = start_x / out_width;

    start_x += 1;
    int x_1 = start_x % out_width;
    int y_1 = start_x / out_width;

    start_x += 1;
    int x_2 = start_x % out_width;
    int y_2 = start_x / out_width;

    start_x += 1;
    int x_3 = start_x % out_width;
    int y_3 = start_x / out_width;

    for (int i = 0; i < kennel_area; i++) {
        mat4 data_mat;
        mat4 kennel;
        int k_x = i % kennel_width;
        int k_y = i / kennel_width;

        int x_offset = pad_w + k_x;
        int y_offset = pad_h + k_y;

        int w_0 = x_offset + strides[0] * x_0;
        int h_0 = y_offset + strides[1] * y_0;
        int w_1 = x_offset + strides[0] * x_1;
        int h_1 = y_offset + strides[1] * y_1;
        int w_2 = x_offset + strides[0] * x_2;
        int h_2 = y_offset + strides[1] * y_2;
        int w_3 = x_offset + strides[0] * x_3;
        int h_3 = y_offset + strides[1] * y_3;

        kennel[0] = imageLoad(kennel_image, ivec3(i, z_index0, 0));
        kennel[1] = imageLoad(kennel_image, ivec3(i, z_index1, 0));
        kennel[2] = imageLoad(kennel_image, ivec3(i, z_index2, 0));
        kennel[3] = imageLoad(kennel_image, ivec3(i, z_index3, 0));

        kennel = transpose(kennel);

        data_mat[0] = imageLoad(input_image, ivec3(w_0, h_0, 0));
        data_mat[1] = imageLoad(input_image, ivec3(w_1, h_1, 0));
        data_mat[2] = imageLoad(input_image, ivec3(w_2, h_2, 0));
        data_mat[3] = imageLoad(input_image, ivec3(w_3, h_3, 0));

        result += kennel * data_mat;
    }

    ivec2 restore_index0 = getRelativeRestoreIndex(start_x_index, 0, out_width);
    ivec2 restore_index1 = getRelativeRestoreIndex(start_x_index, 1, out_width);
    ivec2 restore_index2 = getRelativeRestoreIndex(start_x_index, 2, out_width);
    ivec2 restore_index3 = getRelativeRestoreIndex(start_x_index, 3, out_width);

    imageStore(output_image, ivec3(restore_index0.xy, pos.z), activeVector(active_type,result[0]));
    imageStore(output_image, ivec3(restore_index1.xy, pos.z), activeVector(active_type,result[1]));
    imageStore(output_image, ivec3(restore_index2.xy, pos.z), activeVector(active_type,result[2]));
    imageStore(output_image, ivec3(restore_index3.xy, pos.z), activeVector(active_type,result[3]));
}

//int realIndex(int v,  int border) {
//    if (v < 0 || v >= border) {
//        return 1023;
//    } else {
//        return v;
//    }
//}

ivec2 getRelativeRestoreIndex(int pos, int offset, int out_width) {
    pos = pos + offset;
    int x = pos % out_width;
    int y = pos / out_width;
    return ivec2(x, y);
}

float relu(float i){
    if (i > 0.0){
        return i;
    } else {
        return 0.0;
    }
}

float sigmoid(float i){
    return 1.0 / (1.0 + exp(-i));
}

vec4 activeVector(int type, vec4 v) {
    if (type == 0) {
        return vec4(relu(v[0]), relu(v[1]), relu(v[2]), relu(v[3]));
    } else if (type == 1) {
        return vec4(sigmoid(v[0]), sigmoid(v[1]), sigmoid(v[2]), sigmoid(v[3]));
    } else if (type == 2){
        return vec4(tanh(v[0]), tanh(v[1]), tanh(v[2]), tanh(v[3]));
    } else {
        return v;
    }
}