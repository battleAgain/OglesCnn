layout (local_size_x = X_SIZE, local_size_y = Y_SIZE, local_size_z = Z_SIZE) in;

uniform int params[13];
layout(binding = 0, rgba32f) readonly uniform lowp image2DArray input_image;
layout(binding = 1, rgba32f) writeonly uniform lowp image2DArray output_image;

// 计算工作组坐标 x, y, z  x为输出特征图的x y为输入特征图的y z为输出特征图在输出纹理上的深度
void main(void)
{
    ivec3 pos = ivec3(gl_GlobalInvocationID.xyz);
    int input_shape[3] = int[3](params[0], params[1], params[2]);
    int output_shape[3] = int[3](params[3], params[4], params[5]);
    int kernel_shape[2] = int[2](params[6], params[7]);
    int strides[2] = int[2](params[8], params[9]);
    int in_depth = params[10];                 // 有效纹理最大深度
    int pad_w = params[11];
    int pad_h = params[12];

    if (pos.y >= output_shape[1] || pos.z >= in_depth) {
        return;
    }
    ivec2 start_index = ivec2(pad_w + strides[0] * pos.x, pad_h + strides[1] * pos.y);
    vec4 output_value;
    for (int y=0; y < kernel_shape[1]; y++){
        for (int x=0;x < kernel_shape[0]; x++){
            ivec2 pool_index = ivec2(x, y) + start_index;
            vec4 data = imageLoad(input_image, ivec3(pool_index, pos.z));
            output_value +=  data;
        }
    }
    output_value /= float(kernel_shape[0] * kernel_shape[1]);
    imageStore(output_image, pos, output_value);
}