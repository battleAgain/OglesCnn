layout (local_size_x = X_SIZE, local_size_y = Y_SIZE, local_size_z = Z_SIZE) in;

uniform int params[11];  // input_shape[3] output_shape[3] active_type in_depth out_depth pad_w, pad_h
layout(binding = 0, rgba32f) readonly uniform image2DArray input_image;
layout(binding = 1, rgba32f) writeonly uniform image2DArray output_image;
layout(binding = 2, rgba32f) readonly uniform image2DArray kennel_image;

float sum(vec4 v);
float relu(float i);
float sigmoid(float i);
vec4 activeVector(int type, vec4 v);

/**
* 输出 2x2 filter 3x3 stride 1x1
*/
void main(void)
{
    // 分解参数
    int in_width = params[0];
    int in_height = params[1];
    int in_channel = params[2];

    int out_width = params[3];
    int out_height = params[4];
    int out_channel = params[5];

    int active_type = params[6];
    int in_depth = params[7];
    int out_depth = params[8];

    int pad_w = params[9];
    int pad_h = params[10];

    ivec3 pos = ivec3(gl_GlobalInvocationID.xyz);

    int start_x = pos.x * 2;
    int start_y = pos.y * 2;

    if (start_x >= out_width || start_y >= out_height || pos.z >= out_depth) {
        return;
    }

    int z_0 = pos.z * 4;
    int z_1 = z_0 + 1;
    int z_2 = z_1 + 1;
    int z_3 = z_2 + 1;

    float bias0 = imageLoad(kennel_image, ivec3(16, z_0, 0))[0];
    float bias1 = imageLoad(kennel_image, ivec3(16, z_1, 0))[0];
    float bias2 = imageLoad(kennel_image, ivec3(16, z_2, 0))[0];
    float bias3 = imageLoad(kennel_image, ivec3(16, z_3, 0))[0];

    vec4 result00 = vec4(bias0, bias1, bias2, bias3);
    vec4 result01 = vec4(bias0, bias1, bias2, bias3);
    vec4 result10 = vec4(bias0, bias1, bias2, bias3);
    vec4 result11 = vec4(bias0, bias1, bias2, bias3);

    int conv_x0 = pad_w + start_x;
    int conv_y0 = pad_h + start_y;
    int conv_x1 = conv_x0 + 1;
    int conv_y1 = conv_y0 + 1;
    int conv_x2 = conv_x1 + 1;
    int conv_y2 = conv_y1 + 1;
    int conv_x3 = conv_x2 + 1;
    int conv_y3 = conv_y2 + 1;

    for (int c = 0; c < in_depth; c++) {

        vec4 data00 = imageLoad(input_image, ivec3(conv_x0, conv_y0, c));
        vec4 data01 = imageLoad(input_image, ivec3(conv_x1, conv_y0, c));
        vec4 data02 = imageLoad(input_image, ivec3(conv_x2, conv_y0, c));
        vec4 data03 = imageLoad(input_image, ivec3(conv_x3, conv_y0, c));

        vec4 data10 = imageLoad(input_image, ivec3(conv_x0, conv_y1, c));
        vec4 data11 = imageLoad(input_image, ivec3(conv_x1, conv_y1, c));
        vec4 data12 = imageLoad(input_image, ivec3(conv_x2, conv_y1, c));
        vec4 data13 = imageLoad(input_image, ivec3(conv_x3, conv_y1, c));

        vec4 data20 = imageLoad(input_image, ivec3(conv_x0, conv_y2, c));
        vec4 data21 = imageLoad(input_image, ivec3(conv_x1, conv_y2, c));
        vec4 data22 = imageLoad(input_image, ivec3(conv_x2, conv_y2, c));
        vec4 data23 = imageLoad(input_image, ivec3(conv_x3, conv_y2, c));

        vec4 data30 = imageLoad(input_image, ivec3(conv_x0, conv_y3, c));
        vec4 data31 = imageLoad(input_image, ivec3(conv_x1, conv_y3, c));
        vec4 data32 = imageLoad(input_image, ivec3(conv_x2, conv_y3, c));
        vec4 data33 = imageLoad(input_image, ivec3(conv_x3, conv_y3, c));

        vec4 d00_20_sub = data00 - data20;
        vec4 d01_21_sub = data01 - data21;
        vec4 d02_22_sub = data02 - data22;
        vec4 d03_23_sub = data03 - data23;

        vec4 d10_20_add = data10 + data20;
        vec4 d11_21_add = data11 + data21;
        vec4 d12_22_add = data12 + data22;
        vec4 d13_23_add = data13 + data23;

        vec4 d20_10_sub = data20 - data10;
        vec4 d21_11_sub = data21 - data11;
        vec4 d22_12_sub = data22 - data12;
        vec4 d23_13_sub = data23 - data13;

        vec4 d10_30_sub = data10 - data30;
        vec4 d11_31_sub = data11 - data31;
        vec4 d12_32_sub = data12 - data32;
        vec4 d13_33_sub = data13 - data33;

        vec4 BtdB00 = d00_20_sub - d02_22_sub;
        vec4 BtdB01 = d01_21_sub + d02_22_sub;
        vec4 BtdB02 = d02_22_sub - d01_21_sub;
        vec4 BtdB03 = d01_21_sub - d03_23_sub;

        vec4 BtdB10 = d10_20_add - d12_22_add;
        vec4 BtdB11 = d11_21_add + d12_22_add;
        vec4 BtdB12 = d12_22_add - d11_21_add;
        vec4 BtdB13 = d11_21_add - d13_23_add;

        vec4 BtdB20 = d20_10_sub - d22_12_sub;
        vec4 BtdB21 = d21_11_sub + d22_12_sub;
        vec4 BtdB22 = d22_12_sub - d21_11_sub;
        vec4 BtdB23 = d21_11_sub - d23_13_sub;

        vec4 BtdB30 = d10_30_sub - d12_32_sub;
        vec4 BtdB31 = d11_31_sub + d12_32_sub;
        vec4 BtdB32 = d12_32_sub - d11_31_sub;
        vec4 BtdB33 = d11_31_sub - d13_33_sub;


        for (int i = 0; i < 4; i++) {
            int z_i = z_0 + i;
            vec4 GgGt00_0 = imageLoad(kennel_image, ivec3(0, z_i, c));
            vec4 GgGt01_0 = imageLoad(kennel_image, ivec3(1, z_i, c));
            vec4 GgGt02_0 = imageLoad(kennel_image, ivec3(2, z_i, c));
            vec4 GgGt03_0 = imageLoad(kennel_image, ivec3(3, z_i, c));

            vec4 GgGt10_0 = imageLoad(kennel_image, ivec3(4, z_i, c));
            vec4 GgGt11_0 = imageLoad(kennel_image, ivec3(5, z_i, c));
            vec4 GgGt12_0 = imageLoad(kennel_image, ivec3(6, z_i, c));
            vec4 GgGt13_0 = imageLoad(kennel_image, ivec3(7, z_i, c));

            vec4 GgGt20_0 = imageLoad(kennel_image, ivec3(8, z_i, c));
            vec4 GgGt21_0 = imageLoad(kennel_image, ivec3(9, z_i, c));
            vec4 GgGt22_0 = imageLoad(kennel_image, ivec3(10, z_i, c));
            vec4 GgGt23_0 = imageLoad(kennel_image, ivec3(11, z_i, c));

            vec4 GgGt30_0 = imageLoad(kennel_image, ivec3(12, z_i, c));
            vec4 GgGt31_0 = imageLoad(kennel_image, ivec3(13, z_i, c));
            vec4 GgGt32_0 = imageLoad(kennel_image, ivec3(14, z_i, c));
            vec4 GgGt33_0 = imageLoad(kennel_image, ivec3(15, z_i, c));

            vec4 m00_0 = BtdB00 * GgGt00_0;
            vec4 m01_0 = BtdB01 * GgGt01_0;
            vec4 m02_0 = BtdB02 * GgGt02_0;
            vec4 m03_0 = BtdB03 * GgGt03_0;

            vec4 m10_0 = BtdB10 * GgGt10_0;
            vec4 m11_0 = BtdB11 * GgGt11_0;
            vec4 m12_0 = BtdB12 * GgGt12_0;
            vec4 m13_0 = BtdB13 * GgGt13_0;

            vec4 m20_0 = BtdB20 * GgGt20_0;
            vec4 m21_0 = BtdB21 * GgGt21_0;
            vec4 m22_0 = BtdB22 * GgGt22_0;
            vec4 m23_0 = BtdB23 * GgGt23_0;

            vec4 m30_0 = BtdB30 * GgGt30_0;
            vec4 m31_0 = BtdB31 * GgGt31_0;
            vec4 m32_0 = BtdB32 * GgGt32_0;
            vec4 m33_0 = BtdB33 * GgGt33_0;

            vec4 m01_11_21_0 = m01_0 + m11_0 + m21_0;
            vec4 m02_12_22_0 = m02_0 + m12_0 + m22_0;
            vec4 m11_21_31_0 = m11_0 - m21_0 - m31_0;
            vec4 m12_22_32_0 = m12_0 - m22_0 - m32_0;

            result00[i] += sum(m00_0 + m10_0 + m20_0 + m01_11_21_0 + m02_12_22_0);
            result01[i] += sum(m01_11_21_0 - m02_12_22_0 - m03_0 - m13_0 - m23_0);
            result10[i] += sum(m10_0 - m20_0 - m30_0 + m11_21_31_0 + m12_22_32_0);
            result11[i] += sum(m11_21_31_0 - m12_22_32_0 - m13_0 + m23_0 + m33_0);
        }
    }

    int index_x_1 = start_x + 1;
    int index_y_1 = start_y + 1;

    imageStore(output_image, ivec3(start_x, start_y, pos.z), activeVector(-1, result00));
    imageStore(output_image, ivec3(index_x_1, start_y, pos.z), activeVector(-1, result01));
    imageStore(output_image, ivec3(start_x, index_y_1, pos.z), activeVector(-1, result10));
    imageStore(output_image, ivec3(index_x_1, index_y_1, pos.z), activeVector(-1, result11));
}

float sum(vec4 v) {
    return v[0] + v[1] + v[2] + v[3];
}

float relu(float i){
    if (i > 0.0){
        return i;
    } else {
        return 0.0;
    }
}

float sigmoid(float i){
    return 1.0 / (1.0 + exp(-i));
}

vec4 activeVector(int type, vec4 v) {
    if (type == 0) {
        return vec4(relu(v[0]), relu(v[1]), relu(v[2]), relu(v[3]));
    } else if (type == 1) {
        return vec4(sigmoid(v[0]), sigmoid(v[1]), sigmoid(v[2]), sigmoid(v[3]));
    } else if (type == 2){
        return vec4(tanh(v[0]), tanh(v[1]), tanh(v[2]), tanh(v[3]));
    } else {
        return v;
    }
}