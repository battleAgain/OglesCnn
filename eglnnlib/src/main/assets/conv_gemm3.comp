layout (local_size_x = X_SIZE, local_size_y = Y_SIZE, local_size_z = Z_SIZE) in;

uniform int params[15];  // kennel_shape[3] input_shape[3] output_shape[3] strides[2] active_type pad_w, pad_h
layout(binding = 0, rgba32f) readonly uniform image2DArray input_image;
layout(binding = 1, rgba32f) writeonly uniform image2DArray output_image;
layout(binding = 2, rgba32f) readonly uniform image2DArray kennel_image;

float relu(float i);
float sigmoid(float i);
vec4 activeVector(int type, vec4 v);
ivec2 getRelativeRestoreIndex(int pos,int out_width, int c_offset);

void main(void)
{
    // 分解参数
    int kennel_width = params[0];
    int kennel_height = params[1];
    int kennel_channel = params[2];

    int in_width = params[3];
    int in_height = params[4];
    int in_channel = params[5];

    int out_width = params[6];
    int out_height = params[7];
    int out_channel = params[8];

    int strides[2] = int[2](params[9], params[10]);

    int active_type = params[11];
    int align_channel = params[12];

    int pad_w = params[13];
    int pad_h = params[14];

    int count = align_channel / 4;

    int output_area = out_width * out_height;
    int kennel_area = kennel_width * kennel_height;
    ivec3 pos = ivec3(gl_GlobalInvocationID.xyz);

    int start_x_index = pos.x * 4;
    int start_z_index = pos.z * 4;

    if (start_x_index >= output_area || pos.y >= count|| start_z_index >= out_channel){
        return;
    }

    int z_index0 = start_z_index;
    int z_index1 = start_z_index + 1;
    int z_index2 = start_z_index + 2;
    int z_index3 = start_z_index + 3;

    ivec2 conv_index_on_tex0;
    ivec2 conv_index_on_tex1;
    ivec2 conv_index_on_tex2;
    ivec2 conv_index_on_tex3;

    mat4 data_mat0;

    mat4 result;

    int start_x0 = start_x_index;
    int x_0 = start_x0 % out_width;
    int y_0 = start_x0 / out_width;

    int start_x1 = start_x0 + 1;
    int x_1 = start_x1 % out_width;
    int y_1 = start_x1 / out_width;

    int start_x2 = start_x1 + 1;
    int x_2 = start_x2 % out_width;
    int y_2 = start_x2 / out_width;

    int start_x3 = start_x2 + 1;
    int x_3 = start_x3 % out_width;
    int y_3 = start_x3 / out_width;

    for (int i = 0; i < kennel_area; i++) {
        mat4 kennel;
        int k_x = i % kennel_width;
        int k_y = i / kennel_width;

        int x_offset = pad_w + k_x;
        int y_offset = pad_h + k_y;

        conv_index_on_tex0 = ivec2(x_offset + strides[0] * x_0, y_offset + strides[1] * y_0);
        conv_index_on_tex1 = ivec2(x_offset + strides[0] * x_1, y_offset + strides[1] * y_1);
        conv_index_on_tex2 = ivec2(x_offset + strides[0] * x_2, y_offset + strides[1] * y_2);
        conv_index_on_tex3 = ivec2(x_offset + strides[0] * x_3, y_offset + strides[1] * y_3);

//        for (int c = 0; c < pos.y + 1; c++) {
//            kennel[0] = imageLoad(kennel_image, ivec3(i, z_index0, c));
//            kennel[1] = imageLoad(kennel_image, ivec3(i, z_index1, c));
//            kennel[2] = imageLoad(kennel_image, ivec3(i, z_index2, c));
//            kennel[3] = imageLoad(kennel_image, ivec3(i, z_index3, c));
//
//            kennel = transpose(kennel);
//
//            data_mat0[0] = imageLoad(input_image, ivec3(conv_index_on_tex0, c));
//            data_mat0[1] = imageLoad(input_image, ivec3(conv_index_on_tex1, c));
//            data_mat0[2] = imageLoad(input_image, ivec3(conv_index_on_tex2, c));
//            data_mat0[3] = imageLoad(input_image, ivec3(conv_index_on_tex3, c));
//
//            result += kennel * data_mat0;
//        }

        kennel[0] = imageLoad(kennel_image, ivec3(i, z_index0, pos.y));
        kennel[1] = imageLoad(kennel_image, ivec3(i, z_index1, pos.y));
        kennel[2] = imageLoad(kennel_image, ivec3(i, z_index2, pos.y));
        kennel[3] = imageLoad(kennel_image, ivec3(i, z_index3, pos.y));

        kennel = transpose(kennel);

        data_mat0[0] = imageLoad(input_image, ivec3(conv_index_on_tex0, pos.y));
        data_mat0[1] = imageLoad(input_image, ivec3(conv_index_on_tex1, pos.y));
        data_mat0[2] = imageLoad(input_image, ivec3(conv_index_on_tex2, pos.y));
        data_mat0[3] = imageLoad(input_image, ivec3(conv_index_on_tex3, pos.y));

        result += kennel * data_mat0;
    }

    int c_offset =  pos.y * (out_height + 0);

    ivec2 restore_index0 = getRelativeRestoreIndex(start_x0, out_width, c_offset);
    ivec2 restore_index1 = getRelativeRestoreIndex(start_x1, out_width, c_offset);
    ivec2 restore_index2 = getRelativeRestoreIndex(start_x2, out_width, c_offset);
    ivec2 restore_index3 = getRelativeRestoreIndex(start_x3, out_width, c_offset);

    imageStore(output_image, ivec3(restore_index0.xy, pos.z), activeVector(active_type, result[0]));
    imageStore(output_image, ivec3(restore_index1.xy, pos.z), activeVector(active_type, result[1]));
    imageStore(output_image, ivec3(restore_index2.xy, pos.z), activeVector(active_type, result[2]));
    imageStore(output_image, ivec3(restore_index3.xy, pos.z), activeVector(active_type, result[3]));
}

ivec2 getRelativeRestoreIndex(int pos,int out_width, int c_offset) {
    int x = pos % out_width;
    int y = pos / out_width;
    if (y >= out_width) {   // 超出输出纹理范围
        x = -1;
        y = -1;
    }
    return ivec2(x, y + c_offset);
}

float relu(float i){
    if (i > 0.0){
        return i;
    } else {
        return 0.0;
    }
}

float sigmoid(float i){
    return 1.0 / (1.0 + exp(-i));
}

vec4 activeVector(int type, vec4 v) {
    if (type == 0) {
        return vec4(relu(v[0]), relu(v[1]), relu(v[2]), relu(v[3]));
    } else if (type == 1) {
        return vec4(sigmoid(v[0]), sigmoid(v[1]), sigmoid(v[2]), sigmoid(v[3]));
    } else if (type == 2){
        return vec4(tanh(v[0]), tanh(v[1]), tanh(v[2]), tanh(v[3]));
    } else {
        return v;
    }
}