layout (local_size_x = X_SIZE, local_size_y = Y_SIZE, local_size_z = Z_SIZE) in;

uniform int params[15];  // kernel_shape[3] input_shape[3] output_shape[3] strides[2] active_type pad_w, pad_h
layout(binding = 0, rgba16f) readonly uniform lowp image2DArray input_image;
layout(binding = 1, rgba16f) writeonly uniform lowp image2DArray output_image;
layout(binding = 2, rgba16f) readonly uniform lowp image2DArray kernel_image;

float relu(float i);
float sigmoid(float i);
vec4 activeVector(int type, vec4 v);

ivec2 getRelativeRestoreIndex(int pos, int out_width);

void main(void)
{
    // 分解参数
    int kernel_width = params[0];
    int kernel_height = params[1];
    int kernel_channel = params[2];

    int in_width = params[3];
    int in_height = params[4];
    int in_channel = params[5];

    int out_width = params[6];
    int out_height = params[7];
    int out_channel = params[8];

    int strides[2] = int[2](params[9], params[10]);

    int active_type = params[11];
    int in_depth = params[12];

    int pad_w = params[13];
    int pad_h = params[14];

    int output_area = out_width * out_height;
    int kernel_area = kernel_width * kernel_height;
    ivec3 pos = ivec3(gl_GlobalInvocationID.xyz);

    int start_x_index = pos.x * 4;
    int start_z_index = pos.z * 4;

    int z_index0 = start_z_index;
    int z_index1 = start_z_index + 1;
    int z_index2 = start_z_index + 2;
    int z_index3 = start_z_index + 3;

    if (start_x_index >= output_area || start_z_index >= out_channel){
        return;
    }

    float bias0 = imageLoad(kernel_image, ivec3(kernel_area, z_index0, 0))[0];
    float bias1 = imageLoad(kernel_image, ivec3(kernel_area, z_index1, 0))[0];
    float bias2 = imageLoad(kernel_image, ivec3(kernel_area, z_index2, 0))[0];
    float bias3 = imageLoad(kernel_image, ivec3(kernel_area, z_index3, 0))[0];
    mat4 result = mat4(bias0, bias1, bias2, bias3,
                       bias0, bias1, bias2, bias3,
                       bias0, bias1, bias2, bias3,
                       bias0, bias1, bias2, bias3);

    int start_x0 = start_x_index;
    int x_0 = start_x0 % out_width;
    int y_0 = start_x0 / out_width;

    int start_x1 = start_x0 + 1;
    int x_1 = start_x1 % out_width;
    int y_1 = start_x1 / out_width;

    int start_x2 = start_x1 + 1;
    int x_2 = start_x2 % out_width;
    int y_2 = start_x2 / out_width;

    int start_x3 = start_x2 + 1;
    int x_3 = start_x3 % out_width;
    int y_3 = start_x3 / out_width;

    mat4 kernel;
    mat4 data_mat0;

    for (int i = 0; i < kernel_area; i++) {
        int k_x = i % kernel_width;
        int k_y = i / kernel_width;

        int x_offset = pad_w + k_x;
        int y_offset = pad_h + k_y;

        ivec2 conv_index_on_tex0 = ivec2(x_offset + strides[0] * x_0, y_offset + strides[1] * y_0);
        ivec2 conv_index_on_tex1 = ivec2(x_offset + strides[0] * x_1, y_offset + strides[1] * y_1);
        ivec2 conv_index_on_tex2 = ivec2(x_offset + strides[0] * x_2, y_offset + strides[1] * y_2);
        ivec2 conv_index_on_tex3 = ivec2(x_offset + strides[0] * x_3, y_offset + strides[1] * y_3);

        for (int c = 0; c < in_depth; c++) {
            vec4 kernel0 = imageLoad(kernel_image, ivec3(i, z_index0, c));
            vec4 kernel1 = imageLoad(kernel_image, ivec3(i, z_index1, c));
            vec4 kernel2 = imageLoad(kernel_image, ivec3(i, z_index2, c));
            vec4 kernel3 = imageLoad(kernel_image, ivec3(i, z_index3, c));

            kernel = mat4(kernel0[0], kernel1[0], kernel2[0], kernel3[0],
                            kernel0[1], kernel1[1], kernel2[1], kernel3[1],
                            kernel0[2], kernel1[2], kernel2[2], kernel3[2],
                            kernel0[3], kernel1[3], kernel2[3], kernel3[3]);

            data_mat0[0] = imageLoad(input_image, ivec3(conv_index_on_tex0, c));
            data_mat0[1] = imageLoad(input_image, ivec3(conv_index_on_tex1, c));
            data_mat0[2] = imageLoad(input_image, ivec3(conv_index_on_tex2, c));
            data_mat0[3] = imageLoad(input_image, ivec3(conv_index_on_tex3, c));

            result += kernel * data_mat0;
        }
    }

    ivec2 restore_index0 = getRelativeRestoreIndex(start_x0, out_width);
    ivec2 restore_index1 = getRelativeRestoreIndex(start_x1, out_width);
    ivec2 restore_index2 = getRelativeRestoreIndex(start_x2, out_width);
    ivec2 restore_index3 = getRelativeRestoreIndex(start_x3, out_width);

    imageStore(output_image, ivec3(restore_index0.xy, pos.z), activeVector(active_type, result[0]));
    imageStore(output_image, ivec3(restore_index1.xy, pos.z), activeVector(active_type, result[1]));
    imageStore(output_image, ivec3(restore_index2.xy, pos.z), activeVector(active_type, result[2]));
    imageStore(output_image, ivec3(restore_index3.xy, pos.z), activeVector(active_type, result[3]));
}

int alignBy4(int channel) {
    int align = 4;
    return (channel + (align - 1)) & ~(align - 1);
}

ivec2 getRelativeRestoreIndex(int pos,int out_width) {
    int x = pos % out_width;
    int y = pos / out_width;
    return ivec2(x, y);
}

float relu(float i){
    if (i > 0.0){
        return i;
    } else {
        return 0.0;
    }
}

float sigmoid(float i){
    return 1.0 / (1.0 + exp(-i));
}

vec4 activeVector(int type, vec4 v) {
    if (type == 0) {
        return vec4(relu(v[0]), relu(v[1]), relu(v[2]), relu(v[3]));
    } else if (type == 1) {
        return vec4(sigmoid(v[0]), sigmoid(v[1]), sigmoid(v[2]), sigmoid(v[3]));
    } else if (type == 2){
        return vec4(tanh(v[0]), tanh(v[1]), tanh(v[2]), tanh(v[3]));
    } else {
        return v;
    }
}