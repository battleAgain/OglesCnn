layout (local_size_x = X_SIZE, local_size_y = Y_SIZE, local_size_z = Z_SIZE) in;

uniform int params[6];
layout(binding = 0, rgba32f) writeonly uniform  image2DArray input_image1;
layout(binding = 1, rgba32f) readonly uniform  image2DArray input_image2;

bool isInInputShape(ivec2 index, int[3] input_shape);


// TODO 暂时为考虑传入时 输入纹理channel 未4对齐的情况
// TODO 暂时只考虑输入 2 张纹理的情况
// 计算工作组坐标 x, y, z  x为输出特征图的x y为输入特征图的y z为输出特征图在输出纹理上的深度
void main(void)
{
    ivec3 pos = ivec3(gl_GlobalInvocationID.xyz);
    int in_width1 = params[0];
    int in_height1 = params[1];
    int in_depth1 = params[2];

    int in_width2 = params[3];
    int in_height2 = params[4];
    int in_depth2 = params[5];

    if (pos.y >= in_height2 || pos.z >= in_depth2) {
        return;
    }

    vec4 data = imageLoad(input_image2, pos);
    imageStore(input_image1, ivec3(pos.x, pos.y, pos.z + in_depth1), data);
}
