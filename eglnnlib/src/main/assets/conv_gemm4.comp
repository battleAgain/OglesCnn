layout (local_size_x = X_SIZE, local_size_y = Y_SIZE, local_size_z = Z_SIZE) in;

uniform int params[15];  // kennel_shape[3] input_shape[3] output_shape[3] strides[2] padding active_type
layout(binding = 0, rgba32f) readonly uniform image2DArray input_image;
layout(binding = 1, rgba32f) writeonly uniform image2DArray output_image;
layout(binding = 2, rgba32f) readonly uniform image2DArray kennel_image;
layout(binding = 3, rgba32i) readonly uniform iimage2DArray conv_index_image;

float relu(float i);
float sigmoid(float i);
float activeValue(int type, float v);
vec4 avtiveVec(int type, vec4 in_vec);

ivec2 getRelativeRestoreIndex(int pos, int out_width);

void main(void)
{
    // 分解参数
    int kennel_width = params[0];
    int kennel_height = params[1];
    int kennel_channel = params[2];

    int in_width = params[3];
    int in_height = params[4];
    int in_channel = params[5];

    int out_width = params[6];
    int out_height = params[7];
    int out_channel = params[8];

    int strides[2] = int[2](params[9], params[10]);
    int padding = params[11];

    int active_type = params[12];
    int align_channel = params[13];

    int count = align_channel / 4;

    int output_area = out_width * out_height;
    int kennel_area = kennel_width * kennel_height;
    ivec3 pos = ivec3(gl_GlobalInvocationID.xyz);

    int start_x_index = pos.x * 4;
    int start_z_index = pos.z * 4;

    int x_index0 = start_x_index;
    int x_index1 = start_x_index + 1;
    int x_index2 = start_x_index + 2;
    int x_index3 = start_x_index + 3;

    int z_index0 = start_z_index;
    int z_index1 = start_z_index + 1;
    int z_index2 = start_z_index + 2;
    int z_index3 = start_z_index + 3;

    if (start_x_index >= output_area || start_z_index >= out_channel){
        return;
    }

    int delta = output_area - start_x_index;

    mat4 kennel = mat4(1.0, 1.0, 1.0, 1.0,
                            1.0, 1.0, 1.0, 1.0,
                            1.0, 1.0, 1.0, 1.0,
                            1.0 ,1.0, 1.0, 1.0);

    if (delta >= 4) {
        mat4 result;

        ivec2 conv_index_on_tex0;
        ivec2 conv_index_on_tex1;
        ivec2 conv_index_on_tex2;
        ivec2 conv_index_on_tex3;

        mat4 data_mat0;

        int bias_index = kennel_area;
        float bias0 = imageLoad(kennel_image, ivec3(bias_index, z_index0, 0))[0];
        float bias1 = imageLoad(kennel_image, ivec3(bias_index, z_index1, 0))[0];
        float bias2 = imageLoad(kennel_image, ivec3(bias_index, z_index2, 0))[0];
        float bias3 = imageLoad(kennel_image, ivec3(bias_index, z_index3, 0))[0];

        mat4 bias = mat4(bias0, bias1, bias2, bias3,
                        bias0, bias1, bias2, bias3,
                        bias0, bias1, bias2, bias3,
                        bias0, bias1, bias2, bias3);
        result = bias;

        for (int i = 0; i < kennel_area; i++) {
            conv_index_on_tex0 = imageLoad(conv_index_image, ivec3(x_index0, 0, i)).xy;
            conv_index_on_tex1 = imageLoad(conv_index_image, ivec3(x_index1, 0, i)).xy;
            conv_index_on_tex2 = imageLoad(conv_index_image, ivec3(x_index2, 0, i)).xy;
            conv_index_on_tex3 = imageLoad(conv_index_image, ivec3(x_index3, 0, i)).xy;

            for (int c = 0; c < count; c++) {
                data_mat0[0] = imageLoad(input_image, ivec3(conv_index_on_tex0, c));
                data_mat0[1] = imageLoad(input_image, ivec3(conv_index_on_tex1, c));
                data_mat0[2] = imageLoad(input_image, ivec3(conv_index_on_tex2, c));
                data_mat0[3] = imageLoad(input_image, ivec3(conv_index_on_tex3, c));

                kennel[0] = imageLoad(kennel_image, ivec3(i, z_index0, c));
                kennel[1] = imageLoad(kennel_image, ivec3(i, z_index1, c));
                kennel[2] = imageLoad(kennel_image, ivec3(i, z_index2, c));
                kennel[3] = imageLoad(kennel_image, ivec3(i, z_index3, c));

                kennel = transpose(kennel);

                result += kennel * data_mat0;
            }
        }
        ivec2 restore_index0 = getRelativeRestoreIndex(x_index0, out_width);
        ivec2 restore_index1 = getRelativeRestoreIndex(x_index1, out_width);
        ivec2 restore_index2 = getRelativeRestoreIndex(x_index2, out_width);
        ivec2 restore_index3 = getRelativeRestoreIndex(x_index3, out_width);

        imageStore(output_image, ivec3(restore_index0.xy, pos.z), avtiveVec(active_type, result[0]));
        imageStore(output_image, ivec3(restore_index1.xy, pos.z), avtiveVec(active_type, result[1]));
        imageStore(output_image, ivec3(restore_index2.xy, pos.z), avtiveVec(active_type, result[2]));
        imageStore(output_image, ivec3(restore_index3.xy, pos.z), avtiveVec(active_type, result[3]));
    } else if (delta == 3) {
        mat3x4 result;

        ivec2 conv_index_on_tex0;
        ivec2 conv_index_on_tex1;
        ivec2 conv_index_on_tex2;

        mat3x4 data_mat0;

        int bias_index = kennel_area;
        float bias0 = imageLoad(kennel_image, ivec3(bias_index, z_index0, 0))[0];
        float bias1 = imageLoad(kennel_image, ivec3(bias_index, z_index1, 0))[0];
        float bias2 = imageLoad(kennel_image, ivec3(bias_index, z_index2, 0))[0];
        float bias3 = imageLoad(kennel_image, ivec3(bias_index, z_index3, 0))[0];

        mat3x4 bias = mat3x4(bias0, bias1, bias2, bias3,
                            bias0, bias1, bias2, bias3,
                            bias0, bias1, bias2, bias3);
        result = bias;

        for (int i = 0; i < kennel_area; i++) {
            conv_index_on_tex0 = imageLoad(conv_index_image, ivec3(x_index0, 0, i)).xy;
            conv_index_on_tex1 = imageLoad(conv_index_image, ivec3(x_index1, 0, i)).xy;
            conv_index_on_tex2 = imageLoad(conv_index_image, ivec3(x_index2, 0, i)).xy;

            for (int c = 0; c < count; c++) {
                data_mat0[0] = imageLoad(input_image, ivec3(conv_index_on_tex0, c));
                data_mat0[1] = imageLoad(input_image, ivec3(conv_index_on_tex1, c));
                data_mat0[2] = imageLoad(input_image, ivec3(conv_index_on_tex2, c));

                kennel[0] = imageLoad(kennel_image, ivec3(i, z_index0, c));
                kennel[1] = imageLoad(kennel_image, ivec3(i, z_index1, c));
                kennel[2] = imageLoad(kennel_image, ivec3(i, z_index2, c));
                kennel[3] = imageLoad(kennel_image, ivec3(i, z_index3, c));

                kennel = transpose(kennel);

                result += kennel * data_mat0;
            }
        }
        ivec2 restore_index0 = getRelativeRestoreIndex(x_index0, out_width);
        ivec2 restore_index1 = getRelativeRestoreIndex(x_index1, out_width);
        ivec2 restore_index2 = getRelativeRestoreIndex(x_index2, out_width);

        imageStore(output_image, ivec3(restore_index0.xy, pos.z), avtiveVec(active_type, result[0]));
        imageStore(output_image, ivec3(restore_index1.xy, pos.z), avtiveVec(active_type, result[1]));
        imageStore(output_image, ivec3(restore_index2.xy, pos.z), avtiveVec(active_type, result[2]));
    } else if (delta == 2) {
        mat2x4 result;

        ivec2 conv_index_on_tex0;
        ivec2 conv_index_on_tex1;

        mat2x4 data_mat0;

        int bias_index = kennel_area;
        float bias0 = imageLoad(kennel_image, ivec3(bias_index, z_index0, 0))[0];
        float bias1 = imageLoad(kennel_image, ivec3(bias_index, z_index1, 0))[0];
        float bias2 = imageLoad(kennel_image, ivec3(bias_index, z_index2, 0))[0];
        float bias3 = imageLoad(kennel_image, ivec3(bias_index, z_index3, 0))[0];

        mat2x4 bias = mat2x4(bias0, bias1, bias2, bias3,
                            bias0, bias1, bias2, bias3);
        result = bias;

        for (int i = 0; i < kennel_area; i++) {
            conv_index_on_tex0 = imageLoad(conv_index_image, ivec3(x_index0, 0, i)).xy;
            conv_index_on_tex1 = imageLoad(conv_index_image, ivec3(x_index1, 0, i)).xy;

            for (int c = 0; c < count; c++) {
                data_mat0[0] = imageLoad(input_image, ivec3(conv_index_on_tex0, c));
                data_mat0[1] = imageLoad(input_image, ivec3(conv_index_on_tex1, c));

                kennel[0] = imageLoad(kennel_image, ivec3(i, z_index0, c));
                kennel[1] = imageLoad(kennel_image, ivec3(i, z_index1, c));
                kennel[2] = imageLoad(kennel_image, ivec3(i, z_index2, c));
                kennel[3] = imageLoad(kennel_image, ivec3(i, z_index3, c));

                kennel = transpose(kennel);

                result += kennel * data_mat0;
            }
        }
        ivec2 restore_index0 = getRelativeRestoreIndex(x_index0, out_width);
        ivec2 restore_index1 = getRelativeRestoreIndex(x_index1, out_width);

        imageStore(output_image, ivec3(restore_index0.xy, pos.z), avtiveVec(active_type, result[0]));
        imageStore(output_image, ivec3(restore_index1.xy, pos.z), avtiveVec(active_type, result[0]));
    } else {
        vec4 result;

        ivec2 conv_index_on_tex0;

        vec4 data0;

        int bias_index = kennel_area;
        float bias0 = imageLoad(kennel_image, ivec3(bias_index, z_index0, 0))[0];
        float bias1 = imageLoad(kennel_image, ivec3(bias_index, z_index1, 0))[0];
        float bias2 = imageLoad(kennel_image, ivec3(bias_index, z_index2, 0))[0];
        float bias3 = imageLoad(kennel_image, ivec3(bias_index, z_index3, 0))[0];

        vec4 bias = vec4(bias0, bias1, bias2, bias3);
        result = bias;

        for (int i = 0; i < kennel_area; i++) {
            conv_index_on_tex0 = imageLoad(conv_index_image, ivec3(x_index0, 0, i)).xy;

            for (int c = 0; c < count; c++) {
                data0 = imageLoad(input_image, ivec3(conv_index_on_tex0, c));

                kennel[0] = imageLoad(kennel_image, ivec3(i, z_index0, c));
                kennel[1] = imageLoad(kennel_image, ivec3(i, z_index1, c));
                kennel[2] = imageLoad(kennel_image, ivec3(i, z_index2, c));
                kennel[3] = imageLoad(kennel_image, ivec3(i, z_index3, c));

                kennel = transpose(kennel);

                result += kennel * data0;
            }
        }
        ivec2 restore_index0 = getRelativeRestoreIndex(x_index0, out_width);
        imageStore(output_image, ivec3(restore_index0.xy, pos.z), avtiveVec(active_type, result));
    }
}

int alignBy4(int channel) {
    int align = 4;
    return (channel + (align - 1)) & ~(align - 1);
}

ivec2 getRelativeRestoreIndex(int pos, int out_width) {
    int x = pos % out_width;
    int y = pos / out_width;
    return ivec2(x, y);
}

float relu(float i){
    if (i > 0.0){
        return i;
    } else {
        return 0.0;
    }
}

float sigmoid(float i){
    return 1.0 / (1.0 + exp(-i));
}

float activeValue(int type, float v){
    if (type == 0) {
        return relu(v);
    } else if (type == 1) {
        return sigmoid(v);
    } else if (type == 2){
        return tanh(v);
    } else {
        return v;
    }
}

vec4 avtiveVec(int type, vec4 in_vec) {
    if (type == 0) {
        return vec4(relu(in_vec[0]), relu(in_vec[1]), relu(in_vec[2]), relu(in_vec[3]));
    } else if (type == 1) {
        return vec4(sigmoid(in_vec[0]), sigmoid(in_vec[1]), sigmoid(in_vec[2]), sigmoid(in_vec[3]));
    } else if (type == 2){
        return vec4(tanh(in_vec[0]), tanh(in_vec[1]), tanh(in_vec[2]), tanh(in_vec[3]));
    } else {
        return in_vec;
    }
}