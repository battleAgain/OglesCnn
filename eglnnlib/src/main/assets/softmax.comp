layout (local_size_x = X_SIZE, local_size_y = Y_SIZE, local_size_z = Z_SIZE) in;

layout(binding = 0, rgba16f) readonly uniform lowp image2DArray input_image;
layout(binding = 1, rgba16f) writeonly uniform lowp image2DArray output_image;

shared float scanline[AMOUNT];

vec2 getExtremum();
float getSum(vec2 extremun);

void main(void)
{
    ivec2 pos = ivec2(gl_GlobalInvocationID.xy);
    vec4 data0 = imageLoad(input_image, ivec3(4 * pos.x, 0, 0));
    vec4 data1 = imageLoad(input_image, ivec3(4 * pos.x + 1, 0, 0));
    vec4 data2 = imageLoad(input_image, ivec3(4 * pos.x + 2, 0, 0));
    vec4 data3 = imageLoad(input_image, ivec3(4 * pos.x + 3, 0, 0));
    float data[16] = float[16](data0[0], data0[1], data0[2], data0[3],
                               data1[0], data1[1], data1[2], data1[3],
                               data2[0], data2[1], data2[2], data2[3],
                               data3[0], data3[1], data3[2], data3[3]) ;
    int startIndex = pos.x * 16;
    for (int i = 0; i < 16; i++) {
        if (startIndex + i < AMOUNT) {
            scanline[startIndex + i] = data[i];
        }
    }
    barrier();
    vec2 extremun = getExtremum();
    float softmax = 0.0;
    float result[16];
    if (extremun[0] != extremun[1]) {
        float sum = getSum(extremun);
        for (int i = 0; i < 16; i++) {
            int index = startIndex + i;
            if (index < AMOUNT) {
                float v = (scanline[index] - extremun[1]) * 100.0 / (extremun[0] - extremun[1]) - 50.0;
                result[i] =  exp(v) / sum;
            }
        }
    } else {
        softmax = 1.0 / float(AMOUNT);
        result = float[16](softmax,softmax,softmax,softmax,softmax,softmax,softmax,softmax,
                            softmax,softmax,softmax,softmax,softmax,softmax,softmax,softmax);
    }
    imageStore(output_image, ivec3(4 * pos.x, 0, 0), vec4(result[0],result[1],result[2],result[3]));
    imageStore(output_image, ivec3(4 * pos.x + 1, 0, 0), vec4(result[4],result[5],result[6],result[7]));
    imageStore(output_image, ivec3(4 * pos.x + 2, 0, 0), vec4(result[8],result[9],result[10],result[11]));
    imageStore(output_image, ivec3(4 * pos.x + 3, 0, 0), vec4(result[12],result[13],result[14],result[15]));
}

vec2 getExtremum(){
    float max_v = scanline[0];
    float min_v = scanline[0];
    for (int i = 0; i< AMOUNT; i++) {
        if (max_v < scanline[i]) {
            max_v = scanline[i];
        } else if (min_v > scanline[i]) {
            min_v = scanline[i];
        }
    }
    return vec2(max_v, min_v);
}

float getSum(vec2 extremun) {
    float sum = 0.0;
    for (int i = 0; i < AMOUNT; i++){
        float v = (scanline[i] - extremun[1]) * 100.0 / (extremun[0] - extremun[1]) - 50.0;
        sum += exp(v);
    }
    return sum;
}