layout (local_size_x = X_SIZE, local_size_y = Y_SIZE, local_size_z = Z_SIZE) in;

uniform int params[9];
layout(binding = 0, rgba32f) readonly uniform lowp image2DArray input_image;
layout(binding = 1, rgba32f) writeonly uniform lowp image2DArray output_image;

layout(std430, binding = 0) buffer BufferObject {
    float kernel_data[KERNEL_SIZE * KERNEL_AMOUNT];
};

ivec2 getFeatureMapIndexInTexture(int num, int width);
vec4 getKernelValue(int start_index, int input_area);
float relu(float i);
float sigmoid(float i);
float activeValue(int type, float v);

void main(void)
{
    ivec3 pos = ivec3(gl_GlobalInvocationID.xyz);

    int in_width = params[0];
    int in_height = params[1];
    int in_channel = params[2];

    int out_width = params[3];
    int out_height = params[4];
    int out_channel = params[5];

    int in_depth = params[6];
    int out_depth = params[7];
    int active_type = params[8];
    int input_area = in_width * in_height;

    if (pos.x >= out_depth) {
        return;
    }

    vec4 output_vec = vec4(0.0);

    for (int i = 0; i < 4; i++) {
        if (pos.x * 4 + i >= KERNEL_AMOUNT) {
            break;
        }

        int offset = (pos.x * 4 + i) * KERNEL_SIZE;

        for (int w = 0; w < in_width; w++) {
            for (int h = 0; h < in_height; h++) {
                for (int d = 0 ; d < in_depth; d++) {
                    vec4 data = imageLoad(input_image, ivec3(w , h, d));
                    int kernel_start_index = (h * in_width + w) + (d * 4) * input_area + offset;
                    vec4 k_v = getKernelValue(kernel_start_index, input_area);
                    output_vec[i] += dot(data, k_v);
                }
            }
        }

        int bias_index = offset + KERNEL_SIZE - 4;
        output_vec[i] += kernel_data[bias_index];
        output_vec[i] = activeValue(active_type, output_vec[i]);
    }
    imageStore(output_image, ivec3(0, 0, pos.x), output_vec);
}

vec4 getKernelValue(int start_index, int input_area) {
    int index1 = start_index + input_area;
    int index2 = index1 + input_area;
    int index3 = index2 + input_area;
    return vec4(kernel_data[start_index], kernel_data[index1], kernel_data[index2], kernel_data[index3]);
}

float relu(float i){
    if (i > 0.0){
        return i;
    } else {
        return 0.0;
    }
}

float sigmoid(float i){
    return 1.0 / (1.0 + exp(-i));
}

float activeValue(int type, float v){
    if (type == 0) {
        return relu(v);
    } else if (type == 1) {
        return sigmoid(v);
    } else if (type == 2){
        return tanh(v);
    } else {
        return v;
    }
}